<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Context Chronicles</title>
    <link>http://contextchronicles.com/tags/go/</link>
    <description>Recent content in go on Context Chronicles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Oct 2023 13:45:40 +0100</lastBuildDate>
    <atom:link href="http://contextchronicles.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gorm UUID Many to Many</title>
      <link>http://contextchronicles.com/posts/gorm-uuid-many-to-many/</link>
      <pubDate>Thu, 05 Oct 2023 13:45:40 +0100</pubDate>
      <guid>http://contextchronicles.com/posts/gorm-uuid-many-to-many/</guid>
      <description>Hasham Ali&amp;rsquo;s How to Use UUID Key Type with Gorm article was terrific for suggesting how to handle using UUID as the ID in gorm. It took a little more fiddling to be able to use the keys in a many-to-many relationship. In the end, it worked by having to explicitly define the join table and the foreign key constraints. Sample code is below.
import ( &amp;#34;time&amp;#34; &amp;#34;github.com/google/uuid&amp;#34; &amp;#34;gorm.io/gorm&amp;#34; ) // BaseAttributes contains common columns for all tables.</description>
    </item>
    <item>
      <title>Go Runtime Frames</title>
      <link>http://contextchronicles.com/posts/go-runtime-frame/</link>
      <pubDate>Sat, 16 Sep 2023 09:25:51 +0100</pubDate>
      <guid>http://contextchronicles.com/posts/go-runtime-frame/</guid>
      <description>Both the go-kit/log and rs/zerolog loggers provide a Caller method that returns the caller of the function that called it. This is useful for logging the function name in the log output. This functionality is immensly useful and roused my curiosity as to how it is implemented.
zerolog logger caller example
import &amp;#34;github.com/rs/zerolog&amp;#34; import &amp;#34;github.com/rs/zerolog/log&amp;#34; func main() { log.Logger = log.With().Caller().Logger() // &amp;lt;-- log.Debug().Str(&amp;#34;foo&amp;#34;, &amp;#34;bar&amp;#34;).Msg(&amp;#34;This will be logged with a caller&amp;#34;) } go-kit logger caller example</description>
    </item>
    <item>
      <title>CockroachDB Local</title>
      <link>http://contextchronicles.com/posts/cockroachdb-local/</link>
      <pubDate>Sun, 03 Sep 2023 07:12:05 +0100</pubDate>
      <guid>http://contextchronicles.com/posts/cockroachdb-local/</guid>
      <description>update 2024-01-11 While not central to this article the use of the CRC32 hash in the code below is noticeable. Since writing this article I learned that the CRC32, particularly the CRC32C variant used by Google Cloud Storage (GCS), is optimized for error detection, not as a unique identifier for data. It has a higher probability of collisions (1 in 4.3 billion) compared to more robust algorithms. To overcome these limitations, SHA-256, a more robust hashing algorithm, is recommended.</description>
    </item>
  </channel>
</rss>
